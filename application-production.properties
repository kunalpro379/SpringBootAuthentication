# =======================================================
# AUTHENTICATION SERVER - PRODUCTION CONFIGURATION
# =======================================================

# ===== SERVER CONFIGURATION =====
server.port=8080
server.servlet.context-path=/
server.forward-headers-strategy=framework

# ===== DATABASE CONFIGURATION =====
# PostgreSQL (Recommended for production)
spring.datasource.url=jdbc:postgresql://localhost:5432/authdb
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection pool settings
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===== JPA/HIBERNATE CONFIGURATION =====
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# ===== JWT CONFIGURATION =====
app.jwtSecret=${JWT_SECRET:mySecretKey123ForAuthenticationServer2024!@#$%^&*()}
app.jwtExpirationMs=${JWT_EXPIRATION_MS:3600000}
app.jwtRefreshExpirationMs=${JWT_REFRESH_EXPIRATION_MS:604800000}

# ===== EMAIL CONFIGURATION =====
# Gmail SMTP (Production)
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:your-email@gmail.com}
spring.mail.password=${MAIL_PASSWORD:your-app-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.trust=${MAIL_HOST:smtp.gmail.com}
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

# Alternative: Amazon SES
# spring.mail.host=email-smtp.us-east-1.amazonaws.com
# spring.mail.port=587
# spring.mail.username=${AWS_SES_USERNAME}
# spring.mail.password=${AWS_SES_PASSWORD}

# ===== OAUTH2 CONFIGURATION =====
# Google OAuth2
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${APP_BASE_URL:http://localhost:8080}/oauth2/callback/google

# GitHub OAuth2 (Optional)
# spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
# spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
# spring.security.oauth2.client.registration.github.scope=user:email

# ===== SECURITY CONFIGURATION =====
app.security.password.min.length=${PASSWORD_MIN_LENGTH:8}
app.security.max.login.attempts=${MAX_LOGIN_ATTEMPTS:5}
app.security.account.lockout.duration=${LOCKOUT_DURATION:30}
app.security.session.timeout=${SESSION_TIMEOUT:30}

# ===== TWO-FACTOR AUTHENTICATION =====
app.2fa.issuer.name=${TFA_ISSUER_NAME:AuthServer}
app.2fa.window.size=3
app.2fa.code.digits=6
app.2fa.code.period=30

# ===== APPLICATION INFORMATION =====
app.name=${APP_NAME:Authentication Server}
app.version=${APP_VERSION:1.0.0}
app.description=${APP_DESCRIPTION:Complete Authentication Server with JWT, OAuth2, and 2FA}
app.frontend.url=${FRONTEND_URL:http://localhost:3000}

# ===== CORS CONFIGURATION =====
app.cors.allowed.origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001,https://yourdomain.com}
app.cors.allowed.methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed.headers=*
app.cors.allow.credentials=true
app.cors.max.age=3600

# ===== LOGGING CONFIGURATION =====
logging.level.com.auth=${LOG_LEVEL:INFO}
logging.level.org.springframework.security=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.web=WARN

# Log file configuration
logging.file.name=${LOG_FILE_PATH:logs/authentication-server.log}
logging.file.max-size=10MB
logging.file.max-history=30
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# ===== FILE UPLOAD CONFIGURATION =====
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:2MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:2MB}

# ===== JACKSON CONFIGURATION =====
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC
spring.jackson.serialization.indent-output=false
spring.jackson.default-property-inclusion=NON_NULL

# ===== ACTUATOR/MONITORING CONFIGURATION =====
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=when-authorized
management.info.env.enabled=true
management.metrics.export.prometheus.enabled=true

# Custom info endpoint
info.app.name=${app.name}
info.app.version=${app.version}
info.app.description=${app.description}

# ===== CACHE CONFIGURATION =====
spring.cache.type=simple
spring.cache.cache-names=configurations,users,roles

# ===== RATE LIMITING (Application Level) =====
app.rate.limit.enabled=${RATE_LIMIT_ENABLED:true}
app.rate.limit.requests.per.minute=${RATE_LIMIT_RPM:60}
app.rate.limit.requests.per.hour=${RATE_LIMIT_RPH:1000}

# ===== EMAIL TEMPLATES =====
app.email.verification.token.expiry=${EMAIL_VERIFICATION_EXPIRY:24}
app.email.password.reset.token.expiry=${PASSWORD_RESET_EXPIRY:2}
app.email.templates.path=classpath:/email-templates/
app.email.from.name=${EMAIL_FROM_NAME:Authentication Server}
app.email.from.address=${EMAIL_FROM_ADDRESS:noreply@authserver.com}

# ===== SSL/TLS CONFIGURATION (for HTTPS) =====
# server.ssl.enabled=true
# server.ssl.key-store=classpath:keystore.p12
# server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD}
# server.ssl.key-store-type=PKCS12
# server.ssl.key-alias=authserver

# ===== PRODUCTION SPECIFIC =====
# Disable web browser-based config clients in production
spring.cloud.config.server.git.force-pull=true

# Server compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# Error handling
server.error.include-stacktrace=never
server.error.include-message=never

# ===== ENVIRONMENT SPECIFIC OVERRIDES =====
# These will be loaded based on active profile

# Development (application-dev.properties)
# spring.jpa.show-sql=true
# logging.level.com.auth=DEBUG

# Testing (application-test.properties)
# spring.datasource.url=jdbc:h2:mem:testdb
# spring.jpa.hibernate.ddl-auto=create-drop

# Production (application-prod.properties)
# spring.jpa.hibernate.ddl-auto=validate
# logging.level.com.auth=WARN

# ===== CUSTOM APPLICATION PROPERTIES =====
# Add your custom application-specific properties here

# Feature flags
app.features.oauth2.enabled=${OAUTH2_ENABLED:true}
app.features.2fa.enabled=${TFA_ENABLED:true}
app.features.email.verification.enabled=${EMAIL_VERIFICATION_ENABLED:true}
app.features.password.reset.enabled=${PASSWORD_RESET_ENABLED:true}
app.features.user.registration.enabled=${USER_REGISTRATION_ENABLED:true}

# Business rules
app.user.max.sessions=${MAX_USER_SESSIONS:5}
app.password.history.count=${PASSWORD_HISTORY_COUNT:5}
app.password.expiry.days=${PASSWORD_EXPIRY_DAYS:90}

# Notification settings
app.notifications.email.enabled=${EMAIL_NOTIFICATIONS_ENABLED:true}
app.notifications.sms.enabled=${SMS_NOTIFICATIONS_ENABLED:false}

# API versioning
app.api.version.header.name=X-API-Version
app.api.default.version=v1

# ===== NOTES =====
# 1. Replace placeholder values with actual production values
# 2. Use environment variables for sensitive information
# 3. Enable SSL/TLS in production
# 4. Configure proper monitoring and alerting
# 5. Set up database backups
# 6. Configure proper log rotation
# 7. Review and adjust security settings
# 8. Test all configurations in staging environment first
